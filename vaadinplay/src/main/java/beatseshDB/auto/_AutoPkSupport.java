package beatseshDB.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _AutoPkSupport was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AutoPkSupport extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NEXT_ID_PK_COLUMN = "NEXT_ID";

    public static final Property<String> TABLE_NAME = Property.create("tableName", String.class);
    public static final Property<Long> NEXT_ID = Property.create("nextId", Long.class);

    protected String tableName;
    protected long nextId;


    public void setTableName(String tableName) {
        beforePropertyWrite("tableName", this.tableName, tableName);
        this.tableName = tableName;
    }

    public String getTableName() {
        beforePropertyRead("tableName");
        return this.tableName;
    }

    public void setNextId(long nextId) {
        beforePropertyWrite("nextId", this.nextId, nextId);
        this.nextId = nextId;
    }

    public long getNextId() {
        beforePropertyRead("nextId");
        return this.nextId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "tableName":
                return this.tableName;
            case "nextId":
                return this.nextId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "tableName":
                this.tableName = (String)val;
                break;
            case "nextId":
                this.nextId = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.tableName);
        out.writeLong(this.nextId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.tableName = (String)in.readObject();
        this.nextId = in.readLong();
    }

}

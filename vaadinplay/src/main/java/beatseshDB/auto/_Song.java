package beatseshDB.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import beatseshDB.Party;

/**
 * Class _Song was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Song extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> LINK = Property.create("link", String.class);
    public static final Property<String> SONG_NAME = Property.create("songName", String.class);
    public static final Property<String> SONG_ARTIST = Property.create("songArtist", String.class);
    public static final Property<LocalDateTime> CREATED = Property.create("created", LocalDateTime.class);
    public static final Property<LocalDateTime> LAST_MODIFIED = Property.create("lastModified", LocalDateTime.class);
    public static final Property<List<Party>> PARTIES = Property.create("parties", List.class);

    protected String link;
    protected String songName;
    protected String songArtist;
    protected LocalDateTime created;
    protected LocalDateTime lastModified;

    protected Object parties;

    public void setLink(String link) {
        beforePropertyWrite("link", this.link, link);
        this.link = link;
    }

    public String getLink() {
        beforePropertyRead("link");
        return this.link;
    }

    public void setSongName(String songName) {
        beforePropertyWrite("songName", this.songName, songName);
        this.songName = songName;
    }

    public String getSongName() {
        beforePropertyRead("songName");
        return this.songName;
    }

    public void setSongArtist(String songArtist) {
        beforePropertyWrite("songArtist", this.songArtist, songArtist);
        this.songArtist = songArtist;
    }

    public String getSongArtist() {
        beforePropertyRead("songArtist");
        return this.songArtist;
    }

    public void setCreated(LocalDateTime created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public LocalDateTime getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setLastModified(LocalDateTime lastModified) {
        beforePropertyWrite("lastModified", this.lastModified, lastModified);
        this.lastModified = lastModified;
    }

    public LocalDateTime getLastModified() {
        beforePropertyRead("lastModified");
        return this.lastModified;
    }

    public void addToParties(Party obj) {
        addToManyTarget("parties", obj, true);
    }

    public void removeFromParties(Party obj) {
        removeToManyTarget("parties", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Party> getParties() {
        return (List<Party>)readProperty("parties");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "link":
                return this.link;
            case "songName":
                return this.songName;
            case "songArtist":
                return this.songArtist;
            case "created":
                return this.created;
            case "lastModified":
                return this.lastModified;
            case "parties":
                return this.parties;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "link":
                this.link = (String)val;
                break;
            case "songName":
                this.songName = (String)val;
                break;
            case "songArtist":
                this.songArtist = (String)val;
                break;
            case "created":
                this.created = (LocalDateTime)val;
                break;
            case "lastModified":
                this.lastModified = (LocalDateTime)val;
                break;
            case "parties":
                this.parties = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.link);
        out.writeObject(this.songName);
        out.writeObject(this.songArtist);
        out.writeObject(this.created);
        out.writeObject(this.lastModified);
        out.writeObject(this.parties);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.link = (String)in.readObject();
        this.songName = (String)in.readObject();
        this.songArtist = (String)in.readObject();
        this.created = (LocalDateTime)in.readObject();
        this.lastModified = (LocalDateTime)in.readObject();
        this.parties = in.readObject();
    }

}

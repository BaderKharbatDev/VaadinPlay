package beatseshDB.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import beatseshDB.Party;

/**
 * Class _User was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _User extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<String> EMAIL_ADDRESS = Property.create("emailAddress", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<Boolean> IS_DJ = Property.create("isDj", Boolean.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<Integer> PARTY_ID = Property.create("partyID", Integer.class);
    public static final Property<LocalDateTime> CREATED = Property.create("created", LocalDateTime.class);
    public static final Property<LocalDateTime> LAST_MODIFIED = Property.create("lastModified", LocalDateTime.class);
    public static final Property<List<Party>> PARTIES = Property.create("parties", List.class);

    protected String emailAddress;
    protected String firstName;
    protected Boolean isDj;
    protected String lastName;
    protected String password;
    protected Integer partyID;
    protected LocalDateTime created;
    protected LocalDateTime lastModified;

    protected Object parties;

    public void setEmailAddress(String emailAddress) {
        beforePropertyWrite("emailAddress", this.emailAddress, emailAddress);
        this.emailAddress = emailAddress;
    }

    public String getEmailAddress() {
        beforePropertyRead("emailAddress");
        return this.emailAddress;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setIsDj(Boolean isDj) {
        beforePropertyWrite("isDj", this.isDj, isDj);
        this.isDj = isDj;
    }

    public Boolean getIsDj() {
        beforePropertyRead("isDj");
        return this.isDj;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setPartyID(int partyID) {
        beforePropertyWrite("partyID", this.partyID, partyID);
        this.partyID = partyID;
    }

    public int getPartyID() {
        beforePropertyRead("partyID");
        if(this.partyID == null) {
            return 0;
        }
        return this.partyID;
    }

    public void setCreated(LocalDateTime created) {
        beforePropertyWrite("created", this.created, created);
        this.created = created;
    }

    public LocalDateTime getCreated() {
        beforePropertyRead("created");
        return this.created;
    }

    public void setLastModified(LocalDateTime lastModified) {
        beforePropertyWrite("lastModified", this.lastModified, lastModified);
        this.lastModified = lastModified;
    }

    public LocalDateTime getLastModified() {
        beforePropertyRead("lastModified");
        return this.lastModified;
    }

    public void addToParties(Party obj) {
        addToManyTarget("parties", obj, true);
    }

    public void removeFromParties(Party obj) {
        removeToManyTarget("parties", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Party> getParties() {
        return (List<Party>)readProperty("parties");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "emailAddress":
                return this.emailAddress;
            case "firstName":
                return this.firstName;
            case "isDj":
                return this.isDj;
            case "lastName":
                return this.lastName;
            case "password":
                return this.password;
            case "partyID":
                return this.partyID;
            case "created":
                return this.created;
            case "lastModified":
                return this.lastModified;
            case "parties":
                return this.parties;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "emailAddress":
                this.emailAddress = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "isDj":
                this.isDj = (Boolean)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "partyID":
                this.partyID = (Integer)val;
                break;
            case "created":
                this.created = (LocalDateTime)val;
                break;
            case "lastModified":
                this.lastModified = (LocalDateTime)val;
                break;
            case "parties":
                this.parties = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.emailAddress);
        out.writeObject(this.firstName);
        out.writeObject(this.isDj);
        out.writeObject(this.lastName);
        out.writeObject(this.password);
        out.writeObject(this.partyID);
        out.writeObject(this.created);
        out.writeObject(this.lastModified);
        out.writeObject(this.parties);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.emailAddress = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.isDj = (Boolean)in.readObject();
        this.lastName = (String)in.readObject();
        this.password = (String)in.readObject();
        this.partyID = (Integer)in.readObject();
        this.created = (LocalDateTime)in.readObject();
        this.lastModified = (LocalDateTime)in.readObject();
        this.parties = in.readObject();
    }

}

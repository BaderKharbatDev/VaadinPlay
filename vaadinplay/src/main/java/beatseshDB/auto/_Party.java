package beatseshDB.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import beatseshDB.Song;
import beatseshDB.User;

/**
 * Class _Party was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Party extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_PK_COLUMN = "ID";

    public static final Property<LocalDateTime> LAST_MODIFIED = Property.create("lastModified", LocalDateTime.class);
    public static final Property<String> PARTY_NAME = Property.create("partyName", String.class);
    public static final Property<Integer> PARTY_CODE = Property.create("partyCode", Integer.class);
    public static final Property<byte[]> MP3 = Property.create("mp3", byte[].class);
    public static final Property<List<User>> USERS = Property.create("users", List.class);
    public static final Property<List<Song>> SONGS = Property.create("songs", List.class);

    protected LocalDateTime lastModified;
    protected String partyName;
    protected int partyCode;
    protected byte[] mp3;

    protected Object users;
    protected Object songs;

    public void setLastModified(LocalDateTime lastModified) {
        beforePropertyWrite("lastModified", this.lastModified, lastModified);
        this.lastModified = lastModified;
    }

    public LocalDateTime getLastModified() {
        beforePropertyRead("lastModified");
        return this.lastModified;
    }

    public void setPartyName(String partyName) {
        beforePropertyWrite("partyName", this.partyName, partyName);
        this.partyName = partyName;
    }

    public String getPartyName() {
        beforePropertyRead("partyName");
        return this.partyName;
    }

    public void setPartyCode(int partyCode) {
        beforePropertyWrite("partyCode", this.partyCode, partyCode);
        this.partyCode = partyCode;
    }

    public int getPartyCode() {
        beforePropertyRead("partyCode");
        return this.partyCode;
    }

    public void setMp3(byte[] mp3) {
        beforePropertyWrite("mp3", this.mp3, mp3);
        this.mp3 = mp3;
    }

    public byte[] getMp3() {
        beforePropertyRead("mp3");
        return this.mp3;
    }

    public void addToUsers(User obj) {
        addToManyTarget("users", obj, true);
    }

    public void removeFromUsers(User obj) {
        removeToManyTarget("users", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<User> getUsers() {
        return (List<User>)readProperty("users");
    }

    public void addToSongs(Song obj) {
        addToManyTarget("songs", obj, true);
    }

    public void removeFromSongs(Song obj) {
        removeToManyTarget("songs", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Song> getSongs() {
        return (List<Song>)readProperty("songs");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "lastModified":
                return this.lastModified;
            case "partyName":
                return this.partyName;
            case "partyCode":
                return this.partyCode;
            case "mp3":
                return this.mp3;
            case "users":
                return this.users;
            case "songs":
                return this.songs;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "lastModified":
                this.lastModified = (LocalDateTime)val;
                break;
            case "partyName":
                this.partyName = (String)val;
                break;
            case "partyCode":
                this.partyCode = val == null ? 0 : (int)val;
                break;
            case "mp3":
                this.mp3 = (byte[])val;
                break;
            case "users":
                this.users = val;
                break;
            case "songs":
                this.songs = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.lastModified);
        out.writeObject(this.partyName);
        out.writeInt(this.partyCode);
        out.writeObject(this.mp3);
        out.writeObject(this.users);
        out.writeObject(this.songs);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.lastModified = (LocalDateTime)in.readObject();
        this.partyName = (String)in.readObject();
        this.partyCode = in.readInt();
        this.mp3 = (byte[])in.readObject();
        this.users = in.readObject();
        this.songs = in.readObject();
    }

}
